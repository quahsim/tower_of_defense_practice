
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model userInfo
 * 
 */
export type userInfo = $Result.DefaultSelection<Prisma.$userInfoPayload>
/**
 * Model game_result_log
 * 
 */
export type game_result_log = $Result.DefaultSelection<Prisma.$game_result_logPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.userInfo`: Exposes CRUD operations for the **userInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInfos
    * const userInfos = await prisma.userInfo.findMany()
    * ```
    */
  get userInfo(): Prisma.userInfoDelegate<ExtArgs>;

  /**
   * `prisma.game_result_log`: Exposes CRUD operations for the **game_result_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Game_result_logs
    * const game_result_logs = await prisma.game_result_log.findMany()
    * ```
    */
  get game_result_log(): Prisma.game_result_logDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.2
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    userInfo: 'userInfo',
    game_result_log: 'game_result_log'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userInfo" | "game_result_log"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      userInfo: {
        payload: Prisma.$userInfoPayload<ExtArgs>
        fields: Prisma.userInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload>
          }
          findFirst: {
            args: Prisma.userInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload>
          }
          findMany: {
            args: Prisma.userInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload>[]
          }
          create: {
            args: Prisma.userInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload>
          }
          createMany: {
            args: Prisma.userInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload>
          }
          update: {
            args: Prisma.userInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload>
          }
          deleteMany: {
            args: Prisma.userInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userInfoPayload>
          }
          aggregate: {
            args: Prisma.UserInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserInfo>
          }
          groupBy: {
            args: Prisma.userInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.userInfoCountArgs<ExtArgs>
            result: $Utils.Optional<UserInfoCountAggregateOutputType> | number
          }
        }
      }
      game_result_log: {
        payload: Prisma.$game_result_logPayload<ExtArgs>
        fields: Prisma.game_result_logFieldRefs
        operations: {
          findUnique: {
            args: Prisma.game_result_logFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.game_result_logFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload>
          }
          findFirst: {
            args: Prisma.game_result_logFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.game_result_logFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload>
          }
          findMany: {
            args: Prisma.game_result_logFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload>[]
          }
          create: {
            args: Prisma.game_result_logCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload>
          }
          createMany: {
            args: Prisma.game_result_logCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.game_result_logDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload>
          }
          update: {
            args: Prisma.game_result_logUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload>
          }
          deleteMany: {
            args: Prisma.game_result_logDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.game_result_logUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.game_result_logUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_result_logPayload>
          }
          aggregate: {
            args: Prisma.Game_result_logAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame_result_log>
          }
          groupBy: {
            args: Prisma.game_result_logGroupByArgs<ExtArgs>
            result: $Utils.Optional<Game_result_logGroupByOutputType>[]
          }
          count: {
            args: Prisma.game_result_logCountArgs<ExtArgs>
            result: $Utils.Optional<Game_result_logCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    gameResults1: number
    gameResults2: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameResults1?: boolean | UserCountOutputTypeCountGameResults1Args
    gameResults2?: boolean | UserCountOutputTypeCountGameResults2Args
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameResults1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_result_logWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameResults2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_result_logWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    userPw: string | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    userPw: string | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    userPw: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    userPw?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    userPw?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    userPw?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    userPw: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    userPw?: boolean
    userInfo?: boolean | user$userInfoArgs<ExtArgs>
    gameResults1?: boolean | user$gameResults1Args<ExtArgs>
    gameResults2?: boolean | user$gameResults2Args<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type userSelectScalar = {
    userId?: boolean
    userPw?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userInfo?: boolean | user$userInfoArgs<ExtArgs>
    gameResults1?: boolean | user$gameResults1Args<ExtArgs>
    gameResults2?: boolean | user$gameResults2Args<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      userInfo: Prisma.$userInfoPayload<ExtArgs> | null
      gameResults1: Prisma.$game_result_logPayload<ExtArgs>[]
      gameResults2: Prisma.$game_result_logPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      userPw: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userInfo<T extends user$userInfoArgs<ExtArgs> = {}>(args?: Subset<T, user$userInfoArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    gameResults1<T extends user$gameResults1Args<ExtArgs> = {}>(args?: Subset<T, user$gameResults1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "findMany"> | Null>
    gameResults2<T extends user$gameResults2Args<ExtArgs> = {}>(args?: Subset<T, user$gameResults2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly userId: FieldRef<"user", 'Int'>
    readonly userPw: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.userInfo
   */
  export type user$userInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    where?: userInfoWhereInput
  }

  /**
   * user.gameResults1
   */
  export type user$gameResults1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    where?: game_result_logWhereInput
    orderBy?: game_result_logOrderByWithRelationInput | game_result_logOrderByWithRelationInput[]
    cursor?: game_result_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Game_result_logScalarFieldEnum | Game_result_logScalarFieldEnum[]
  }

  /**
   * user.gameResults2
   */
  export type user$gameResults2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    where?: game_result_logWhereInput
    orderBy?: game_result_logOrderByWithRelationInput | game_result_logOrderByWithRelationInput[]
    cursor?: game_result_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Game_result_logScalarFieldEnum | Game_result_logScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model userInfo
   */

  export type AggregateUserInfo = {
    _count: UserInfoCountAggregateOutputType | null
    _avg: UserInfoAvgAggregateOutputType | null
    _sum: UserInfoSumAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  export type UserInfoAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserInfoSumAggregateOutputType = {
    userId: number | null
  }

  export type UserInfoMinAggregateOutputType = {
    userId: number | null
    highScore: string | null
    win: string | null
    lose: string | null
  }

  export type UserInfoMaxAggregateOutputType = {
    userId: number | null
    highScore: string | null
    win: string | null
    lose: string | null
  }

  export type UserInfoCountAggregateOutputType = {
    userId: number
    highScore: number
    win: number
    lose: number
    _all: number
  }


  export type UserInfoAvgAggregateInputType = {
    userId?: true
  }

  export type UserInfoSumAggregateInputType = {
    userId?: true
  }

  export type UserInfoMinAggregateInputType = {
    userId?: true
    highScore?: true
    win?: true
    lose?: true
  }

  export type UserInfoMaxAggregateInputType = {
    userId?: true
    highScore?: true
    win?: true
    lose?: true
  }

  export type UserInfoCountAggregateInputType = {
    userId?: true
    highScore?: true
    win?: true
    lose?: true
    _all?: true
  }

  export type UserInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userInfo to aggregate.
     */
    where?: userInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userInfos to fetch.
     */
    orderBy?: userInfoOrderByWithRelationInput | userInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userInfos
    **/
    _count?: true | UserInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInfoMaxAggregateInputType
  }

  export type GetUserInfoAggregateType<T extends UserInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInfo[P]>
      : GetScalarType<T[P], AggregateUserInfo[P]>
  }




  export type userInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userInfoWhereInput
    orderBy?: userInfoOrderByWithAggregationInput | userInfoOrderByWithAggregationInput[]
    by: UserInfoScalarFieldEnum[] | UserInfoScalarFieldEnum
    having?: userInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInfoCountAggregateInputType | true
    _avg?: UserInfoAvgAggregateInputType
    _sum?: UserInfoSumAggregateInputType
    _min?: UserInfoMinAggregateInputType
    _max?: UserInfoMaxAggregateInputType
  }

  export type UserInfoGroupByOutputType = {
    userId: number
    highScore: string | null
    win: string | null
    lose: string | null
    _count: UserInfoCountAggregateOutputType | null
    _avg: UserInfoAvgAggregateOutputType | null
    _sum: UserInfoSumAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  type GetUserInfoGroupByPayload<T extends userInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
            : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
        }
      >
    >


  export type userInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    highScore?: boolean
    win?: boolean
    lose?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInfo"]>


  export type userInfoSelectScalar = {
    userId?: boolean
    highScore?: boolean
    win?: boolean
    lose?: boolean
  }

  export type userInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $userInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userInfo"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      highScore: string | null
      win: string | null
      lose: string | null
    }, ExtArgs["result"]["userInfo"]>
    composites: {}
  }

  type userInfoGetPayload<S extends boolean | null | undefined | userInfoDefaultArgs> = $Result.GetResult<Prisma.$userInfoPayload, S>

  type userInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserInfoCountAggregateInputType | true
    }

  export interface userInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userInfo'], meta: { name: 'userInfo' } }
    /**
     * Find zero or one UserInfo that matches the filter.
     * @param {userInfoFindUniqueArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userInfoFindUniqueArgs>(args: SelectSubset<T, userInfoFindUniqueArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userInfoFindUniqueOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, userInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userInfoFindFirstArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userInfoFindFirstArgs>(args?: SelectSubset<T, userInfoFindFirstArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userInfoFindFirstOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, userInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInfos
     * const userInfos = await prisma.userInfo.findMany()
     * 
     * // Get first 10 UserInfos
     * const userInfos = await prisma.userInfo.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userInfoWithUserIdOnly = await prisma.userInfo.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends userInfoFindManyArgs>(args?: SelectSubset<T, userInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserInfo.
     * @param {userInfoCreateArgs} args - Arguments to create a UserInfo.
     * @example
     * // Create one UserInfo
     * const UserInfo = await prisma.userInfo.create({
     *   data: {
     *     // ... data to create a UserInfo
     *   }
     * })
     * 
     */
    create<T extends userInfoCreateArgs>(args: SelectSubset<T, userInfoCreateArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserInfos.
     * @param {userInfoCreateManyArgs} args - Arguments to create many UserInfos.
     * @example
     * // Create many UserInfos
     * const userInfo = await prisma.userInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userInfoCreateManyArgs>(args?: SelectSubset<T, userInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserInfo.
     * @param {userInfoDeleteArgs} args - Arguments to delete one UserInfo.
     * @example
     * // Delete one UserInfo
     * const UserInfo = await prisma.userInfo.delete({
     *   where: {
     *     // ... filter to delete one UserInfo
     *   }
     * })
     * 
     */
    delete<T extends userInfoDeleteArgs>(args: SelectSubset<T, userInfoDeleteArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserInfo.
     * @param {userInfoUpdateArgs} args - Arguments to update one UserInfo.
     * @example
     * // Update one UserInfo
     * const userInfo = await prisma.userInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userInfoUpdateArgs>(args: SelectSubset<T, userInfoUpdateArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserInfos.
     * @param {userInfoDeleteManyArgs} args - Arguments to filter UserInfos to delete.
     * @example
     * // Delete a few UserInfos
     * const { count } = await prisma.userInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userInfoDeleteManyArgs>(args?: SelectSubset<T, userInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInfos
     * const userInfo = await prisma.userInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userInfoUpdateManyArgs>(args: SelectSubset<T, userInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserInfo.
     * @param {userInfoUpsertArgs} args - Arguments to update or create a UserInfo.
     * @example
     * // Update or create a UserInfo
     * const userInfo = await prisma.userInfo.upsert({
     *   create: {
     *     // ... data to create a UserInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInfo we want to update
     *   }
     * })
     */
    upsert<T extends userInfoUpsertArgs>(args: SelectSubset<T, userInfoUpsertArgs<ExtArgs>>): Prisma__userInfoClient<$Result.GetResult<Prisma.$userInfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userInfoCountArgs} args - Arguments to filter UserInfos to count.
     * @example
     * // Count the number of UserInfos
     * const count = await prisma.userInfo.count({
     *   where: {
     *     // ... the filter for the UserInfos we want to count
     *   }
     * })
    **/
    count<T extends userInfoCountArgs>(
      args?: Subset<T, userInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInfoAggregateArgs>(args: Subset<T, UserInfoAggregateArgs>): Prisma.PrismaPromise<GetUserInfoAggregateType<T>>

    /**
     * Group by UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userInfoGroupByArgs['orderBy'] }
        : { orderBy?: userInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userInfo model
   */
  readonly fields: userInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the userInfo model
   */ 
  interface userInfoFieldRefs {
    readonly userId: FieldRef<"userInfo", 'Int'>
    readonly highScore: FieldRef<"userInfo", 'String'>
    readonly win: FieldRef<"userInfo", 'String'>
    readonly lose: FieldRef<"userInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * userInfo findUnique
   */
  export type userInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * Filter, which userInfo to fetch.
     */
    where: userInfoWhereUniqueInput
  }

  /**
   * userInfo findUniqueOrThrow
   */
  export type userInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * Filter, which userInfo to fetch.
     */
    where: userInfoWhereUniqueInput
  }

  /**
   * userInfo findFirst
   */
  export type userInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * Filter, which userInfo to fetch.
     */
    where?: userInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userInfos to fetch.
     */
    orderBy?: userInfoOrderByWithRelationInput | userInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userInfos.
     */
    cursor?: userInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * userInfo findFirstOrThrow
   */
  export type userInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * Filter, which userInfo to fetch.
     */
    where?: userInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userInfos to fetch.
     */
    orderBy?: userInfoOrderByWithRelationInput | userInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userInfos.
     */
    cursor?: userInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * userInfo findMany
   */
  export type userInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * Filter, which userInfos to fetch.
     */
    where?: userInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userInfos to fetch.
     */
    orderBy?: userInfoOrderByWithRelationInput | userInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userInfos.
     */
    cursor?: userInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userInfos.
     */
    skip?: number
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * userInfo create
   */
  export type userInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a userInfo.
     */
    data: XOR<userInfoCreateInput, userInfoUncheckedCreateInput>
  }

  /**
   * userInfo createMany
   */
  export type userInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userInfos.
     */
    data: userInfoCreateManyInput | userInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userInfo update
   */
  export type userInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a userInfo.
     */
    data: XOR<userInfoUpdateInput, userInfoUncheckedUpdateInput>
    /**
     * Choose, which userInfo to update.
     */
    where: userInfoWhereUniqueInput
  }

  /**
   * userInfo updateMany
   */
  export type userInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userInfos.
     */
    data: XOR<userInfoUpdateManyMutationInput, userInfoUncheckedUpdateManyInput>
    /**
     * Filter which userInfos to update
     */
    where?: userInfoWhereInput
  }

  /**
   * userInfo upsert
   */
  export type userInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the userInfo to update in case it exists.
     */
    where: userInfoWhereUniqueInput
    /**
     * In case the userInfo found by the `where` argument doesn't exist, create a new userInfo with this data.
     */
    create: XOR<userInfoCreateInput, userInfoUncheckedCreateInput>
    /**
     * In case the userInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userInfoUpdateInput, userInfoUncheckedUpdateInput>
  }

  /**
   * userInfo delete
   */
  export type userInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
    /**
     * Filter which userInfo to delete.
     */
    where: userInfoWhereUniqueInput
  }

  /**
   * userInfo deleteMany
   */
  export type userInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userInfos to delete
     */
    where?: userInfoWhereInput
  }

  /**
   * userInfo without action
   */
  export type userInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userInfo
     */
    select?: userInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInfoInclude<ExtArgs> | null
  }


  /**
   * Model game_result_log
   */

  export type AggregateGame_result_log = {
    _count: Game_result_logCountAggregateOutputType | null
    _avg: Game_result_logAvgAggregateOutputType | null
    _sum: Game_result_logSumAggregateOutputType | null
    _min: Game_result_logMinAggregateOutputType | null
    _max: Game_result_logMaxAggregateOutputType | null
  }

  export type Game_result_logAvgAggregateOutputType = {
    gameId: number | null
    player1: number | null
    player1Score: number | null
    player2: number | null
    win: number | null
    player2Score: number | null
  }

  export type Game_result_logSumAggregateOutputType = {
    gameId: number | null
    player1: number | null
    player1Score: number | null
    player2: number | null
    win: number | null
    player2Score: number | null
  }

  export type Game_result_logMinAggregateOutputType = {
    gameId: number | null
    player1: number | null
    player1Score: number | null
    startTime: Date | null
    player2: number | null
    win: number | null
    endTime: Date | null
    player2Score: number | null
  }

  export type Game_result_logMaxAggregateOutputType = {
    gameId: number | null
    player1: number | null
    player1Score: number | null
    startTime: Date | null
    player2: number | null
    win: number | null
    endTime: Date | null
    player2Score: number | null
  }

  export type Game_result_logCountAggregateOutputType = {
    gameId: number
    player1: number
    player1Score: number
    startTime: number
    player2: number
    win: number
    endTime: number
    player2Score: number
    _all: number
  }


  export type Game_result_logAvgAggregateInputType = {
    gameId?: true
    player1?: true
    player1Score?: true
    player2?: true
    win?: true
    player2Score?: true
  }

  export type Game_result_logSumAggregateInputType = {
    gameId?: true
    player1?: true
    player1Score?: true
    player2?: true
    win?: true
    player2Score?: true
  }

  export type Game_result_logMinAggregateInputType = {
    gameId?: true
    player1?: true
    player1Score?: true
    startTime?: true
    player2?: true
    win?: true
    endTime?: true
    player2Score?: true
  }

  export type Game_result_logMaxAggregateInputType = {
    gameId?: true
    player1?: true
    player1Score?: true
    startTime?: true
    player2?: true
    win?: true
    endTime?: true
    player2Score?: true
  }

  export type Game_result_logCountAggregateInputType = {
    gameId?: true
    player1?: true
    player1Score?: true
    startTime?: true
    player2?: true
    win?: true
    endTime?: true
    player2Score?: true
    _all?: true
  }

  export type Game_result_logAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_result_log to aggregate.
     */
    where?: game_result_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_result_logs to fetch.
     */
    orderBy?: game_result_logOrderByWithRelationInput | game_result_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: game_result_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_result_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_result_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned game_result_logs
    **/
    _count?: true | Game_result_logCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Game_result_logAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Game_result_logSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Game_result_logMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Game_result_logMaxAggregateInputType
  }

  export type GetGame_result_logAggregateType<T extends Game_result_logAggregateArgs> = {
        [P in keyof T & keyof AggregateGame_result_log]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame_result_log[P]>
      : GetScalarType<T[P], AggregateGame_result_log[P]>
  }




  export type game_result_logGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_result_logWhereInput
    orderBy?: game_result_logOrderByWithAggregationInput | game_result_logOrderByWithAggregationInput[]
    by: Game_result_logScalarFieldEnum[] | Game_result_logScalarFieldEnum
    having?: game_result_logScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Game_result_logCountAggregateInputType | true
    _avg?: Game_result_logAvgAggregateInputType
    _sum?: Game_result_logSumAggregateInputType
    _min?: Game_result_logMinAggregateInputType
    _max?: Game_result_logMaxAggregateInputType
  }

  export type Game_result_logGroupByOutputType = {
    gameId: number
    player1: number
    player1Score: number
    startTime: Date | null
    player2: number | null
    win: number | null
    endTime: Date | null
    player2Score: number | null
    _count: Game_result_logCountAggregateOutputType | null
    _avg: Game_result_logAvgAggregateOutputType | null
    _sum: Game_result_logSumAggregateOutputType | null
    _min: Game_result_logMinAggregateOutputType | null
    _max: Game_result_logMaxAggregateOutputType | null
  }

  type GetGame_result_logGroupByPayload<T extends game_result_logGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Game_result_logGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Game_result_logGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Game_result_logGroupByOutputType[P]>
            : GetScalarType<T[P], Game_result_logGroupByOutputType[P]>
        }
      >
    >


  export type game_result_logSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    gameId?: boolean
    player1?: boolean
    player1Score?: boolean
    startTime?: boolean
    player2?: boolean
    win?: boolean
    endTime?: boolean
    player2Score?: boolean
    user_player1?: boolean | userDefaultArgs<ExtArgs>
    user_player2?: boolean | game_result_log$user_player2Args<ExtArgs>
  }, ExtArgs["result"]["game_result_log"]>


  export type game_result_logSelectScalar = {
    gameId?: boolean
    player1?: boolean
    player1Score?: boolean
    startTime?: boolean
    player2?: boolean
    win?: boolean
    endTime?: boolean
    player2Score?: boolean
  }

  export type game_result_logInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_player1?: boolean | userDefaultArgs<ExtArgs>
    user_player2?: boolean | game_result_log$user_player2Args<ExtArgs>
  }

  export type $game_result_logPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game_result_log"
    objects: {
      user_player1: Prisma.$userPayload<ExtArgs>
      user_player2: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      gameId: number
      player1: number
      player1Score: number
      startTime: Date | null
      player2: number | null
      win: number | null
      endTime: Date | null
      player2Score: number | null
    }, ExtArgs["result"]["game_result_log"]>
    composites: {}
  }

  type game_result_logGetPayload<S extends boolean | null | undefined | game_result_logDefaultArgs> = $Result.GetResult<Prisma.$game_result_logPayload, S>

  type game_result_logCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<game_result_logFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Game_result_logCountAggregateInputType | true
    }

  export interface game_result_logDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game_result_log'], meta: { name: 'game_result_log' } }
    /**
     * Find zero or one Game_result_log that matches the filter.
     * @param {game_result_logFindUniqueArgs} args - Arguments to find a Game_result_log
     * @example
     * // Get one Game_result_log
     * const game_result_log = await prisma.game_result_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends game_result_logFindUniqueArgs>(args: SelectSubset<T, game_result_logFindUniqueArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Game_result_log that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {game_result_logFindUniqueOrThrowArgs} args - Arguments to find a Game_result_log
     * @example
     * // Get one Game_result_log
     * const game_result_log = await prisma.game_result_log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends game_result_logFindUniqueOrThrowArgs>(args: SelectSubset<T, game_result_logFindUniqueOrThrowArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Game_result_log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_result_logFindFirstArgs} args - Arguments to find a Game_result_log
     * @example
     * // Get one Game_result_log
     * const game_result_log = await prisma.game_result_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends game_result_logFindFirstArgs>(args?: SelectSubset<T, game_result_logFindFirstArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Game_result_log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_result_logFindFirstOrThrowArgs} args - Arguments to find a Game_result_log
     * @example
     * // Get one Game_result_log
     * const game_result_log = await prisma.game_result_log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends game_result_logFindFirstOrThrowArgs>(args?: SelectSubset<T, game_result_logFindFirstOrThrowArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Game_result_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_result_logFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Game_result_logs
     * const game_result_logs = await prisma.game_result_log.findMany()
     * 
     * // Get first 10 Game_result_logs
     * const game_result_logs = await prisma.game_result_log.findMany({ take: 10 })
     * 
     * // Only select the `gameId`
     * const game_result_logWithGameIdOnly = await prisma.game_result_log.findMany({ select: { gameId: true } })
     * 
     */
    findMany<T extends game_result_logFindManyArgs>(args?: SelectSubset<T, game_result_logFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Game_result_log.
     * @param {game_result_logCreateArgs} args - Arguments to create a Game_result_log.
     * @example
     * // Create one Game_result_log
     * const Game_result_log = await prisma.game_result_log.create({
     *   data: {
     *     // ... data to create a Game_result_log
     *   }
     * })
     * 
     */
    create<T extends game_result_logCreateArgs>(args: SelectSubset<T, game_result_logCreateArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Game_result_logs.
     * @param {game_result_logCreateManyArgs} args - Arguments to create many Game_result_logs.
     * @example
     * // Create many Game_result_logs
     * const game_result_log = await prisma.game_result_log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends game_result_logCreateManyArgs>(args?: SelectSubset<T, game_result_logCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game_result_log.
     * @param {game_result_logDeleteArgs} args - Arguments to delete one Game_result_log.
     * @example
     * // Delete one Game_result_log
     * const Game_result_log = await prisma.game_result_log.delete({
     *   where: {
     *     // ... filter to delete one Game_result_log
     *   }
     * })
     * 
     */
    delete<T extends game_result_logDeleteArgs>(args: SelectSubset<T, game_result_logDeleteArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Game_result_log.
     * @param {game_result_logUpdateArgs} args - Arguments to update one Game_result_log.
     * @example
     * // Update one Game_result_log
     * const game_result_log = await prisma.game_result_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends game_result_logUpdateArgs>(args: SelectSubset<T, game_result_logUpdateArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Game_result_logs.
     * @param {game_result_logDeleteManyArgs} args - Arguments to filter Game_result_logs to delete.
     * @example
     * // Delete a few Game_result_logs
     * const { count } = await prisma.game_result_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends game_result_logDeleteManyArgs>(args?: SelectSubset<T, game_result_logDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Game_result_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_result_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Game_result_logs
     * const game_result_log = await prisma.game_result_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends game_result_logUpdateManyArgs>(args: SelectSubset<T, game_result_logUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game_result_log.
     * @param {game_result_logUpsertArgs} args - Arguments to update or create a Game_result_log.
     * @example
     * // Update or create a Game_result_log
     * const game_result_log = await prisma.game_result_log.upsert({
     *   create: {
     *     // ... data to create a Game_result_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game_result_log we want to update
     *   }
     * })
     */
    upsert<T extends game_result_logUpsertArgs>(args: SelectSubset<T, game_result_logUpsertArgs<ExtArgs>>): Prisma__game_result_logClient<$Result.GetResult<Prisma.$game_result_logPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Game_result_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_result_logCountArgs} args - Arguments to filter Game_result_logs to count.
     * @example
     * // Count the number of Game_result_logs
     * const count = await prisma.game_result_log.count({
     *   where: {
     *     // ... the filter for the Game_result_logs we want to count
     *   }
     * })
    **/
    count<T extends game_result_logCountArgs>(
      args?: Subset<T, game_result_logCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Game_result_logCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game_result_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_result_logAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Game_result_logAggregateArgs>(args: Subset<T, Game_result_logAggregateArgs>): Prisma.PrismaPromise<GetGame_result_logAggregateType<T>>

    /**
     * Group by Game_result_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_result_logGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends game_result_logGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: game_result_logGroupByArgs['orderBy'] }
        : { orderBy?: game_result_logGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, game_result_logGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_result_logGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game_result_log model
   */
  readonly fields: game_result_logFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game_result_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__game_result_logClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_player1<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user_player2<T extends game_result_log$user_player2Args<ExtArgs> = {}>(args?: Subset<T, game_result_log$user_player2Args<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the game_result_log model
   */ 
  interface game_result_logFieldRefs {
    readonly gameId: FieldRef<"game_result_log", 'Int'>
    readonly player1: FieldRef<"game_result_log", 'Int'>
    readonly player1Score: FieldRef<"game_result_log", 'Int'>
    readonly startTime: FieldRef<"game_result_log", 'DateTime'>
    readonly player2: FieldRef<"game_result_log", 'Int'>
    readonly win: FieldRef<"game_result_log", 'Int'>
    readonly endTime: FieldRef<"game_result_log", 'DateTime'>
    readonly player2Score: FieldRef<"game_result_log", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * game_result_log findUnique
   */
  export type game_result_logFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * Filter, which game_result_log to fetch.
     */
    where: game_result_logWhereUniqueInput
  }

  /**
   * game_result_log findUniqueOrThrow
   */
  export type game_result_logFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * Filter, which game_result_log to fetch.
     */
    where: game_result_logWhereUniqueInput
  }

  /**
   * game_result_log findFirst
   */
  export type game_result_logFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * Filter, which game_result_log to fetch.
     */
    where?: game_result_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_result_logs to fetch.
     */
    orderBy?: game_result_logOrderByWithRelationInput | game_result_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_result_logs.
     */
    cursor?: game_result_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_result_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_result_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_result_logs.
     */
    distinct?: Game_result_logScalarFieldEnum | Game_result_logScalarFieldEnum[]
  }

  /**
   * game_result_log findFirstOrThrow
   */
  export type game_result_logFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * Filter, which game_result_log to fetch.
     */
    where?: game_result_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_result_logs to fetch.
     */
    orderBy?: game_result_logOrderByWithRelationInput | game_result_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_result_logs.
     */
    cursor?: game_result_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_result_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_result_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_result_logs.
     */
    distinct?: Game_result_logScalarFieldEnum | Game_result_logScalarFieldEnum[]
  }

  /**
   * game_result_log findMany
   */
  export type game_result_logFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * Filter, which game_result_logs to fetch.
     */
    where?: game_result_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_result_logs to fetch.
     */
    orderBy?: game_result_logOrderByWithRelationInput | game_result_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing game_result_logs.
     */
    cursor?: game_result_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_result_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_result_logs.
     */
    skip?: number
    distinct?: Game_result_logScalarFieldEnum | Game_result_logScalarFieldEnum[]
  }

  /**
   * game_result_log create
   */
  export type game_result_logCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * The data needed to create a game_result_log.
     */
    data: XOR<game_result_logCreateInput, game_result_logUncheckedCreateInput>
  }

  /**
   * game_result_log createMany
   */
  export type game_result_logCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many game_result_logs.
     */
    data: game_result_logCreateManyInput | game_result_logCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * game_result_log update
   */
  export type game_result_logUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * The data needed to update a game_result_log.
     */
    data: XOR<game_result_logUpdateInput, game_result_logUncheckedUpdateInput>
    /**
     * Choose, which game_result_log to update.
     */
    where: game_result_logWhereUniqueInput
  }

  /**
   * game_result_log updateMany
   */
  export type game_result_logUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update game_result_logs.
     */
    data: XOR<game_result_logUpdateManyMutationInput, game_result_logUncheckedUpdateManyInput>
    /**
     * Filter which game_result_logs to update
     */
    where?: game_result_logWhereInput
  }

  /**
   * game_result_log upsert
   */
  export type game_result_logUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * The filter to search for the game_result_log to update in case it exists.
     */
    where: game_result_logWhereUniqueInput
    /**
     * In case the game_result_log found by the `where` argument doesn't exist, create a new game_result_log with this data.
     */
    create: XOR<game_result_logCreateInput, game_result_logUncheckedCreateInput>
    /**
     * In case the game_result_log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<game_result_logUpdateInput, game_result_logUncheckedUpdateInput>
  }

  /**
   * game_result_log delete
   */
  export type game_result_logDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
    /**
     * Filter which game_result_log to delete.
     */
    where: game_result_logWhereUniqueInput
  }

  /**
   * game_result_log deleteMany
   */
  export type game_result_logDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_result_logs to delete
     */
    where?: game_result_logWhereInput
  }

  /**
   * game_result_log.user_player2
   */
  export type game_result_log$user_player2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * game_result_log without action
   */
  export type game_result_logDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_result_log
     */
    select?: game_result_logSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_result_logInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    userPw: 'userPw'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserInfoScalarFieldEnum: {
    userId: 'userId',
    highScore: 'highScore',
    win: 'win',
    lose: 'lose'
  };

  export type UserInfoScalarFieldEnum = (typeof UserInfoScalarFieldEnum)[keyof typeof UserInfoScalarFieldEnum]


  export const Game_result_logScalarFieldEnum: {
    gameId: 'gameId',
    player1: 'player1',
    player1Score: 'player1Score',
    startTime: 'startTime',
    player2: 'player2',
    win: 'win',
    endTime: 'endTime',
    player2Score: 'player2Score'
  };

  export type Game_result_logScalarFieldEnum = (typeof Game_result_logScalarFieldEnum)[keyof typeof Game_result_logScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    userId?: IntFilter<"user"> | number
    userPw?: StringFilter<"user"> | string
    userInfo?: XOR<UserInfoNullableRelationFilter, userInfoWhereInput> | null
    gameResults1?: Game_result_logListRelationFilter
    gameResults2?: Game_result_logListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    userId?: SortOrder
    userPw?: SortOrder
    userInfo?: userInfoOrderByWithRelationInput
    gameResults1?: game_result_logOrderByRelationAggregateInput
    gameResults2?: game_result_logOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    userPw?: StringFilter<"user"> | string
    userInfo?: XOR<UserInfoNullableRelationFilter, userInfoWhereInput> | null
    gameResults1?: Game_result_logListRelationFilter
    gameResults2?: Game_result_logListRelationFilter
  }, "userId">

  export type userOrderByWithAggregationInput = {
    userId?: SortOrder
    userPw?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"user"> | number
    userPw?: StringWithAggregatesFilter<"user"> | string
  }

  export type userInfoWhereInput = {
    AND?: userInfoWhereInput | userInfoWhereInput[]
    OR?: userInfoWhereInput[]
    NOT?: userInfoWhereInput | userInfoWhereInput[]
    userId?: IntFilter<"userInfo"> | number
    highScore?: StringNullableFilter<"userInfo"> | string | null
    win?: StringNullableFilter<"userInfo"> | string | null
    lose?: StringNullableFilter<"userInfo"> | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type userInfoOrderByWithRelationInput = {
    userId?: SortOrder
    highScore?: SortOrderInput | SortOrder
    win?: SortOrderInput | SortOrder
    lose?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
  }

  export type userInfoWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: userInfoWhereInput | userInfoWhereInput[]
    OR?: userInfoWhereInput[]
    NOT?: userInfoWhereInput | userInfoWhereInput[]
    highScore?: StringNullableFilter<"userInfo"> | string | null
    win?: StringNullableFilter<"userInfo"> | string | null
    lose?: StringNullableFilter<"userInfo"> | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
  }, "userId">

  export type userInfoOrderByWithAggregationInput = {
    userId?: SortOrder
    highScore?: SortOrderInput | SortOrder
    win?: SortOrderInput | SortOrder
    lose?: SortOrderInput | SortOrder
    _count?: userInfoCountOrderByAggregateInput
    _avg?: userInfoAvgOrderByAggregateInput
    _max?: userInfoMaxOrderByAggregateInput
    _min?: userInfoMinOrderByAggregateInput
    _sum?: userInfoSumOrderByAggregateInput
  }

  export type userInfoScalarWhereWithAggregatesInput = {
    AND?: userInfoScalarWhereWithAggregatesInput | userInfoScalarWhereWithAggregatesInput[]
    OR?: userInfoScalarWhereWithAggregatesInput[]
    NOT?: userInfoScalarWhereWithAggregatesInput | userInfoScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"userInfo"> | number
    highScore?: StringNullableWithAggregatesFilter<"userInfo"> | string | null
    win?: StringNullableWithAggregatesFilter<"userInfo"> | string | null
    lose?: StringNullableWithAggregatesFilter<"userInfo"> | string | null
  }

  export type game_result_logWhereInput = {
    AND?: game_result_logWhereInput | game_result_logWhereInput[]
    OR?: game_result_logWhereInput[]
    NOT?: game_result_logWhereInput | game_result_logWhereInput[]
    gameId?: IntFilter<"game_result_log"> | number
    player1?: IntFilter<"game_result_log"> | number
    player1Score?: IntFilter<"game_result_log"> | number
    startTime?: DateTimeNullableFilter<"game_result_log"> | Date | string | null
    player2?: IntNullableFilter<"game_result_log"> | number | null
    win?: IntNullableFilter<"game_result_log"> | number | null
    endTime?: DateTimeNullableFilter<"game_result_log"> | Date | string | null
    player2Score?: IntNullableFilter<"game_result_log"> | number | null
    user_player1?: XOR<UserRelationFilter, userWhereInput>
    user_player2?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }

  export type game_result_logOrderByWithRelationInput = {
    gameId?: SortOrder
    player1?: SortOrder
    player1Score?: SortOrder
    startTime?: SortOrderInput | SortOrder
    player2?: SortOrderInput | SortOrder
    win?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    player2Score?: SortOrderInput | SortOrder
    user_player1?: userOrderByWithRelationInput
    user_player2?: userOrderByWithRelationInput
  }

  export type game_result_logWhereUniqueInput = Prisma.AtLeast<{
    gameId?: number
    AND?: game_result_logWhereInput | game_result_logWhereInput[]
    OR?: game_result_logWhereInput[]
    NOT?: game_result_logWhereInput | game_result_logWhereInput[]
    player1?: IntFilter<"game_result_log"> | number
    player1Score?: IntFilter<"game_result_log"> | number
    startTime?: DateTimeNullableFilter<"game_result_log"> | Date | string | null
    player2?: IntNullableFilter<"game_result_log"> | number | null
    win?: IntNullableFilter<"game_result_log"> | number | null
    endTime?: DateTimeNullableFilter<"game_result_log"> | Date | string | null
    player2Score?: IntNullableFilter<"game_result_log"> | number | null
    user_player1?: XOR<UserRelationFilter, userWhereInput>
    user_player2?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }, "gameId">

  export type game_result_logOrderByWithAggregationInput = {
    gameId?: SortOrder
    player1?: SortOrder
    player1Score?: SortOrder
    startTime?: SortOrderInput | SortOrder
    player2?: SortOrderInput | SortOrder
    win?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    player2Score?: SortOrderInput | SortOrder
    _count?: game_result_logCountOrderByAggregateInput
    _avg?: game_result_logAvgOrderByAggregateInput
    _max?: game_result_logMaxOrderByAggregateInput
    _min?: game_result_logMinOrderByAggregateInput
    _sum?: game_result_logSumOrderByAggregateInput
  }

  export type game_result_logScalarWhereWithAggregatesInput = {
    AND?: game_result_logScalarWhereWithAggregatesInput | game_result_logScalarWhereWithAggregatesInput[]
    OR?: game_result_logScalarWhereWithAggregatesInput[]
    NOT?: game_result_logScalarWhereWithAggregatesInput | game_result_logScalarWhereWithAggregatesInput[]
    gameId?: IntWithAggregatesFilter<"game_result_log"> | number
    player1?: IntWithAggregatesFilter<"game_result_log"> | number
    player1Score?: IntWithAggregatesFilter<"game_result_log"> | number
    startTime?: DateTimeNullableWithAggregatesFilter<"game_result_log"> | Date | string | null
    player2?: IntNullableWithAggregatesFilter<"game_result_log"> | number | null
    win?: IntNullableWithAggregatesFilter<"game_result_log"> | number | null
    endTime?: DateTimeNullableWithAggregatesFilter<"game_result_log"> | Date | string | null
    player2Score?: IntNullableWithAggregatesFilter<"game_result_log"> | number | null
  }

  export type userCreateInput = {
    userPw: string
    userInfo?: userInfoCreateNestedOneWithoutUserInput
    gameResults1?: game_result_logCreateNestedManyWithoutUser_player1Input
    gameResults2?: game_result_logCreateNestedManyWithoutUser_player2Input
  }

  export type userUncheckedCreateInput = {
    userId?: number
    userPw: string
    userInfo?: userInfoUncheckedCreateNestedOneWithoutUserInput
    gameResults1?: game_result_logUncheckedCreateNestedManyWithoutUser_player1Input
    gameResults2?: game_result_logUncheckedCreateNestedManyWithoutUser_player2Input
  }

  export type userUpdateInput = {
    userPw?: StringFieldUpdateOperationsInput | string
    userInfo?: userInfoUpdateOneWithoutUserNestedInput
    gameResults1?: game_result_logUpdateManyWithoutUser_player1NestedInput
    gameResults2?: game_result_logUpdateManyWithoutUser_player2NestedInput
  }

  export type userUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    userPw?: StringFieldUpdateOperationsInput | string
    userInfo?: userInfoUncheckedUpdateOneWithoutUserNestedInput
    gameResults1?: game_result_logUncheckedUpdateManyWithoutUser_player1NestedInput
    gameResults2?: game_result_logUncheckedUpdateManyWithoutUser_player2NestedInput
  }

  export type userCreateManyInput = {
    userId?: number
    userPw: string
  }

  export type userUpdateManyMutationInput = {
    userPw?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    userPw?: StringFieldUpdateOperationsInput | string
  }

  export type userInfoCreateInput = {
    highScore?: string | null
    win?: string | null
    lose?: string | null
    user: userCreateNestedOneWithoutUserInfoInput
  }

  export type userInfoUncheckedCreateInput = {
    userId: number
    highScore?: string | null
    win?: string | null
    lose?: string | null
  }

  export type userInfoUpdateInput = {
    highScore?: NullableStringFieldUpdateOperationsInput | string | null
    win?: NullableStringFieldUpdateOperationsInput | string | null
    lose?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutUserInfoNestedInput
  }

  export type userInfoUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    highScore?: NullableStringFieldUpdateOperationsInput | string | null
    win?: NullableStringFieldUpdateOperationsInput | string | null
    lose?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userInfoCreateManyInput = {
    userId: number
    highScore?: string | null
    win?: string | null
    lose?: string | null
  }

  export type userInfoUpdateManyMutationInput = {
    highScore?: NullableStringFieldUpdateOperationsInput | string | null
    win?: NullableStringFieldUpdateOperationsInput | string | null
    lose?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userInfoUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    highScore?: NullableStringFieldUpdateOperationsInput | string | null
    win?: NullableStringFieldUpdateOperationsInput | string | null
    lose?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type game_result_logCreateInput = {
    player1Score: number
    startTime?: Date | string | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
    user_player1: userCreateNestedOneWithoutGameResults1Input
    user_player2?: userCreateNestedOneWithoutGameResults2Input
  }

  export type game_result_logUncheckedCreateInput = {
    gameId?: number
    player1: number
    player1Score: number
    startTime?: Date | string | null
    player2?: number | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
  }

  export type game_result_logUpdateInput = {
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
    user_player1?: userUpdateOneRequiredWithoutGameResults1NestedInput
    user_player2?: userUpdateOneWithoutGameResults2NestedInput
  }

  export type game_result_logUncheckedUpdateInput = {
    gameId?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2?: NullableIntFieldUpdateOperationsInput | number | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type game_result_logCreateManyInput = {
    gameId?: number
    player1: number
    player1Score: number
    startTime?: Date | string | null
    player2?: number | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
  }

  export type game_result_logUpdateManyMutationInput = {
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type game_result_logUncheckedUpdateManyInput = {
    gameId?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2?: NullableIntFieldUpdateOperationsInput | number | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserInfoNullableRelationFilter = {
    is?: userInfoWhereInput | null
    isNot?: userInfoWhereInput | null
  }

  export type Game_result_logListRelationFilter = {
    every?: game_result_logWhereInput
    some?: game_result_logWhereInput
    none?: game_result_logWhereInput
  }

  export type game_result_logOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    userId?: SortOrder
    userPw?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    userId?: SortOrder
    userPw?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    userId?: SortOrder
    userPw?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type userInfoCountOrderByAggregateInput = {
    userId?: SortOrder
    highScore?: SortOrder
    win?: SortOrder
    lose?: SortOrder
  }

  export type userInfoAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type userInfoMaxOrderByAggregateInput = {
    userId?: SortOrder
    highScore?: SortOrder
    win?: SortOrder
    lose?: SortOrder
  }

  export type userInfoMinOrderByAggregateInput = {
    userId?: SortOrder
    highScore?: SortOrder
    win?: SortOrder
    lose?: SortOrder
  }

  export type userInfoSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type game_result_logCountOrderByAggregateInput = {
    gameId?: SortOrder
    player1?: SortOrder
    player1Score?: SortOrder
    startTime?: SortOrder
    player2?: SortOrder
    win?: SortOrder
    endTime?: SortOrder
    player2Score?: SortOrder
  }

  export type game_result_logAvgOrderByAggregateInput = {
    gameId?: SortOrder
    player1?: SortOrder
    player1Score?: SortOrder
    player2?: SortOrder
    win?: SortOrder
    player2Score?: SortOrder
  }

  export type game_result_logMaxOrderByAggregateInput = {
    gameId?: SortOrder
    player1?: SortOrder
    player1Score?: SortOrder
    startTime?: SortOrder
    player2?: SortOrder
    win?: SortOrder
    endTime?: SortOrder
    player2Score?: SortOrder
  }

  export type game_result_logMinOrderByAggregateInput = {
    gameId?: SortOrder
    player1?: SortOrder
    player1Score?: SortOrder
    startTime?: SortOrder
    player2?: SortOrder
    win?: SortOrder
    endTime?: SortOrder
    player2Score?: SortOrder
  }

  export type game_result_logSumOrderByAggregateInput = {
    gameId?: SortOrder
    player1?: SortOrder
    player1Score?: SortOrder
    player2?: SortOrder
    win?: SortOrder
    player2Score?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type userInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<userInfoCreateWithoutUserInput, userInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: userInfoCreateOrConnectWithoutUserInput
    connect?: userInfoWhereUniqueInput
  }

  export type game_result_logCreateNestedManyWithoutUser_player1Input = {
    create?: XOR<game_result_logCreateWithoutUser_player1Input, game_result_logUncheckedCreateWithoutUser_player1Input> | game_result_logCreateWithoutUser_player1Input[] | game_result_logUncheckedCreateWithoutUser_player1Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player1Input | game_result_logCreateOrConnectWithoutUser_player1Input[]
    createMany?: game_result_logCreateManyUser_player1InputEnvelope
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
  }

  export type game_result_logCreateNestedManyWithoutUser_player2Input = {
    create?: XOR<game_result_logCreateWithoutUser_player2Input, game_result_logUncheckedCreateWithoutUser_player2Input> | game_result_logCreateWithoutUser_player2Input[] | game_result_logUncheckedCreateWithoutUser_player2Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player2Input | game_result_logCreateOrConnectWithoutUser_player2Input[]
    createMany?: game_result_logCreateManyUser_player2InputEnvelope
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
  }

  export type userInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<userInfoCreateWithoutUserInput, userInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: userInfoCreateOrConnectWithoutUserInput
    connect?: userInfoWhereUniqueInput
  }

  export type game_result_logUncheckedCreateNestedManyWithoutUser_player1Input = {
    create?: XOR<game_result_logCreateWithoutUser_player1Input, game_result_logUncheckedCreateWithoutUser_player1Input> | game_result_logCreateWithoutUser_player1Input[] | game_result_logUncheckedCreateWithoutUser_player1Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player1Input | game_result_logCreateOrConnectWithoutUser_player1Input[]
    createMany?: game_result_logCreateManyUser_player1InputEnvelope
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
  }

  export type game_result_logUncheckedCreateNestedManyWithoutUser_player2Input = {
    create?: XOR<game_result_logCreateWithoutUser_player2Input, game_result_logUncheckedCreateWithoutUser_player2Input> | game_result_logCreateWithoutUser_player2Input[] | game_result_logUncheckedCreateWithoutUser_player2Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player2Input | game_result_logCreateOrConnectWithoutUser_player2Input[]
    createMany?: game_result_logCreateManyUser_player2InputEnvelope
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type userInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<userInfoCreateWithoutUserInput, userInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: userInfoCreateOrConnectWithoutUserInput
    upsert?: userInfoUpsertWithoutUserInput
    disconnect?: userInfoWhereInput | boolean
    delete?: userInfoWhereInput | boolean
    connect?: userInfoWhereUniqueInput
    update?: XOR<XOR<userInfoUpdateToOneWithWhereWithoutUserInput, userInfoUpdateWithoutUserInput>, userInfoUncheckedUpdateWithoutUserInput>
  }

  export type game_result_logUpdateManyWithoutUser_player1NestedInput = {
    create?: XOR<game_result_logCreateWithoutUser_player1Input, game_result_logUncheckedCreateWithoutUser_player1Input> | game_result_logCreateWithoutUser_player1Input[] | game_result_logUncheckedCreateWithoutUser_player1Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player1Input | game_result_logCreateOrConnectWithoutUser_player1Input[]
    upsert?: game_result_logUpsertWithWhereUniqueWithoutUser_player1Input | game_result_logUpsertWithWhereUniqueWithoutUser_player1Input[]
    createMany?: game_result_logCreateManyUser_player1InputEnvelope
    set?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    disconnect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    delete?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    update?: game_result_logUpdateWithWhereUniqueWithoutUser_player1Input | game_result_logUpdateWithWhereUniqueWithoutUser_player1Input[]
    updateMany?: game_result_logUpdateManyWithWhereWithoutUser_player1Input | game_result_logUpdateManyWithWhereWithoutUser_player1Input[]
    deleteMany?: game_result_logScalarWhereInput | game_result_logScalarWhereInput[]
  }

  export type game_result_logUpdateManyWithoutUser_player2NestedInput = {
    create?: XOR<game_result_logCreateWithoutUser_player2Input, game_result_logUncheckedCreateWithoutUser_player2Input> | game_result_logCreateWithoutUser_player2Input[] | game_result_logUncheckedCreateWithoutUser_player2Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player2Input | game_result_logCreateOrConnectWithoutUser_player2Input[]
    upsert?: game_result_logUpsertWithWhereUniqueWithoutUser_player2Input | game_result_logUpsertWithWhereUniqueWithoutUser_player2Input[]
    createMany?: game_result_logCreateManyUser_player2InputEnvelope
    set?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    disconnect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    delete?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    update?: game_result_logUpdateWithWhereUniqueWithoutUser_player2Input | game_result_logUpdateWithWhereUniqueWithoutUser_player2Input[]
    updateMany?: game_result_logUpdateManyWithWhereWithoutUser_player2Input | game_result_logUpdateManyWithWhereWithoutUser_player2Input[]
    deleteMany?: game_result_logScalarWhereInput | game_result_logScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<userInfoCreateWithoutUserInput, userInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: userInfoCreateOrConnectWithoutUserInput
    upsert?: userInfoUpsertWithoutUserInput
    disconnect?: userInfoWhereInput | boolean
    delete?: userInfoWhereInput | boolean
    connect?: userInfoWhereUniqueInput
    update?: XOR<XOR<userInfoUpdateToOneWithWhereWithoutUserInput, userInfoUpdateWithoutUserInput>, userInfoUncheckedUpdateWithoutUserInput>
  }

  export type game_result_logUncheckedUpdateManyWithoutUser_player1NestedInput = {
    create?: XOR<game_result_logCreateWithoutUser_player1Input, game_result_logUncheckedCreateWithoutUser_player1Input> | game_result_logCreateWithoutUser_player1Input[] | game_result_logUncheckedCreateWithoutUser_player1Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player1Input | game_result_logCreateOrConnectWithoutUser_player1Input[]
    upsert?: game_result_logUpsertWithWhereUniqueWithoutUser_player1Input | game_result_logUpsertWithWhereUniqueWithoutUser_player1Input[]
    createMany?: game_result_logCreateManyUser_player1InputEnvelope
    set?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    disconnect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    delete?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    update?: game_result_logUpdateWithWhereUniqueWithoutUser_player1Input | game_result_logUpdateWithWhereUniqueWithoutUser_player1Input[]
    updateMany?: game_result_logUpdateManyWithWhereWithoutUser_player1Input | game_result_logUpdateManyWithWhereWithoutUser_player1Input[]
    deleteMany?: game_result_logScalarWhereInput | game_result_logScalarWhereInput[]
  }

  export type game_result_logUncheckedUpdateManyWithoutUser_player2NestedInput = {
    create?: XOR<game_result_logCreateWithoutUser_player2Input, game_result_logUncheckedCreateWithoutUser_player2Input> | game_result_logCreateWithoutUser_player2Input[] | game_result_logUncheckedCreateWithoutUser_player2Input[]
    connectOrCreate?: game_result_logCreateOrConnectWithoutUser_player2Input | game_result_logCreateOrConnectWithoutUser_player2Input[]
    upsert?: game_result_logUpsertWithWhereUniqueWithoutUser_player2Input | game_result_logUpsertWithWhereUniqueWithoutUser_player2Input[]
    createMany?: game_result_logCreateManyUser_player2InputEnvelope
    set?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    disconnect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    delete?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    connect?: game_result_logWhereUniqueInput | game_result_logWhereUniqueInput[]
    update?: game_result_logUpdateWithWhereUniqueWithoutUser_player2Input | game_result_logUpdateWithWhereUniqueWithoutUser_player2Input[]
    updateMany?: game_result_logUpdateManyWithWhereWithoutUser_player2Input | game_result_logUpdateManyWithWhereWithoutUser_player2Input[]
    deleteMany?: game_result_logScalarWhereInput | game_result_logScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutUserInfoInput = {
    create?: XOR<userCreateWithoutUserInfoInput, userUncheckedCreateWithoutUserInfoInput>
    connectOrCreate?: userCreateOrConnectWithoutUserInfoInput
    connect?: userWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type userUpdateOneRequiredWithoutUserInfoNestedInput = {
    create?: XOR<userCreateWithoutUserInfoInput, userUncheckedCreateWithoutUserInfoInput>
    connectOrCreate?: userCreateOrConnectWithoutUserInfoInput
    upsert?: userUpsertWithoutUserInfoInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutUserInfoInput, userUpdateWithoutUserInfoInput>, userUncheckedUpdateWithoutUserInfoInput>
  }

  export type userCreateNestedOneWithoutGameResults1Input = {
    create?: XOR<userCreateWithoutGameResults1Input, userUncheckedCreateWithoutGameResults1Input>
    connectOrCreate?: userCreateOrConnectWithoutGameResults1Input
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedOneWithoutGameResults2Input = {
    create?: XOR<userCreateWithoutGameResults2Input, userUncheckedCreateWithoutGameResults2Input>
    connectOrCreate?: userCreateOrConnectWithoutGameResults2Input
    connect?: userWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userUpdateOneRequiredWithoutGameResults1NestedInput = {
    create?: XOR<userCreateWithoutGameResults1Input, userUncheckedCreateWithoutGameResults1Input>
    connectOrCreate?: userCreateOrConnectWithoutGameResults1Input
    upsert?: userUpsertWithoutGameResults1Input
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutGameResults1Input, userUpdateWithoutGameResults1Input>, userUncheckedUpdateWithoutGameResults1Input>
  }

  export type userUpdateOneWithoutGameResults2NestedInput = {
    create?: XOR<userCreateWithoutGameResults2Input, userUncheckedCreateWithoutGameResults2Input>
    connectOrCreate?: userCreateOrConnectWithoutGameResults2Input
    upsert?: userUpsertWithoutGameResults2Input
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutGameResults2Input, userUpdateWithoutGameResults2Input>, userUncheckedUpdateWithoutGameResults2Input>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type userInfoCreateWithoutUserInput = {
    highScore?: string | null
    win?: string | null
    lose?: string | null
  }

  export type userInfoUncheckedCreateWithoutUserInput = {
    highScore?: string | null
    win?: string | null
    lose?: string | null
  }

  export type userInfoCreateOrConnectWithoutUserInput = {
    where: userInfoWhereUniqueInput
    create: XOR<userInfoCreateWithoutUserInput, userInfoUncheckedCreateWithoutUserInput>
  }

  export type game_result_logCreateWithoutUser_player1Input = {
    player1Score: number
    startTime?: Date | string | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
    user_player2?: userCreateNestedOneWithoutGameResults2Input
  }

  export type game_result_logUncheckedCreateWithoutUser_player1Input = {
    gameId?: number
    player1Score: number
    startTime?: Date | string | null
    player2?: number | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
  }

  export type game_result_logCreateOrConnectWithoutUser_player1Input = {
    where: game_result_logWhereUniqueInput
    create: XOR<game_result_logCreateWithoutUser_player1Input, game_result_logUncheckedCreateWithoutUser_player1Input>
  }

  export type game_result_logCreateManyUser_player1InputEnvelope = {
    data: game_result_logCreateManyUser_player1Input | game_result_logCreateManyUser_player1Input[]
    skipDuplicates?: boolean
  }

  export type game_result_logCreateWithoutUser_player2Input = {
    player1Score: number
    startTime?: Date | string | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
    user_player1: userCreateNestedOneWithoutGameResults1Input
  }

  export type game_result_logUncheckedCreateWithoutUser_player2Input = {
    gameId?: number
    player1: number
    player1Score: number
    startTime?: Date | string | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
  }

  export type game_result_logCreateOrConnectWithoutUser_player2Input = {
    where: game_result_logWhereUniqueInput
    create: XOR<game_result_logCreateWithoutUser_player2Input, game_result_logUncheckedCreateWithoutUser_player2Input>
  }

  export type game_result_logCreateManyUser_player2InputEnvelope = {
    data: game_result_logCreateManyUser_player2Input | game_result_logCreateManyUser_player2Input[]
    skipDuplicates?: boolean
  }

  export type userInfoUpsertWithoutUserInput = {
    update: XOR<userInfoUpdateWithoutUserInput, userInfoUncheckedUpdateWithoutUserInput>
    create: XOR<userInfoCreateWithoutUserInput, userInfoUncheckedCreateWithoutUserInput>
    where?: userInfoWhereInput
  }

  export type userInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: userInfoWhereInput
    data: XOR<userInfoUpdateWithoutUserInput, userInfoUncheckedUpdateWithoutUserInput>
  }

  export type userInfoUpdateWithoutUserInput = {
    highScore?: NullableStringFieldUpdateOperationsInput | string | null
    win?: NullableStringFieldUpdateOperationsInput | string | null
    lose?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userInfoUncheckedUpdateWithoutUserInput = {
    highScore?: NullableStringFieldUpdateOperationsInput | string | null
    win?: NullableStringFieldUpdateOperationsInput | string | null
    lose?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type game_result_logUpsertWithWhereUniqueWithoutUser_player1Input = {
    where: game_result_logWhereUniqueInput
    update: XOR<game_result_logUpdateWithoutUser_player1Input, game_result_logUncheckedUpdateWithoutUser_player1Input>
    create: XOR<game_result_logCreateWithoutUser_player1Input, game_result_logUncheckedCreateWithoutUser_player1Input>
  }

  export type game_result_logUpdateWithWhereUniqueWithoutUser_player1Input = {
    where: game_result_logWhereUniqueInput
    data: XOR<game_result_logUpdateWithoutUser_player1Input, game_result_logUncheckedUpdateWithoutUser_player1Input>
  }

  export type game_result_logUpdateManyWithWhereWithoutUser_player1Input = {
    where: game_result_logScalarWhereInput
    data: XOR<game_result_logUpdateManyMutationInput, game_result_logUncheckedUpdateManyWithoutUser_player1Input>
  }

  export type game_result_logScalarWhereInput = {
    AND?: game_result_logScalarWhereInput | game_result_logScalarWhereInput[]
    OR?: game_result_logScalarWhereInput[]
    NOT?: game_result_logScalarWhereInput | game_result_logScalarWhereInput[]
    gameId?: IntFilter<"game_result_log"> | number
    player1?: IntFilter<"game_result_log"> | number
    player1Score?: IntFilter<"game_result_log"> | number
    startTime?: DateTimeNullableFilter<"game_result_log"> | Date | string | null
    player2?: IntNullableFilter<"game_result_log"> | number | null
    win?: IntNullableFilter<"game_result_log"> | number | null
    endTime?: DateTimeNullableFilter<"game_result_log"> | Date | string | null
    player2Score?: IntNullableFilter<"game_result_log"> | number | null
  }

  export type game_result_logUpsertWithWhereUniqueWithoutUser_player2Input = {
    where: game_result_logWhereUniqueInput
    update: XOR<game_result_logUpdateWithoutUser_player2Input, game_result_logUncheckedUpdateWithoutUser_player2Input>
    create: XOR<game_result_logCreateWithoutUser_player2Input, game_result_logUncheckedCreateWithoutUser_player2Input>
  }

  export type game_result_logUpdateWithWhereUniqueWithoutUser_player2Input = {
    where: game_result_logWhereUniqueInput
    data: XOR<game_result_logUpdateWithoutUser_player2Input, game_result_logUncheckedUpdateWithoutUser_player2Input>
  }

  export type game_result_logUpdateManyWithWhereWithoutUser_player2Input = {
    where: game_result_logScalarWhereInput
    data: XOR<game_result_logUpdateManyMutationInput, game_result_logUncheckedUpdateManyWithoutUser_player2Input>
  }

  export type userCreateWithoutUserInfoInput = {
    userPw: string
    gameResults1?: game_result_logCreateNestedManyWithoutUser_player1Input
    gameResults2?: game_result_logCreateNestedManyWithoutUser_player2Input
  }

  export type userUncheckedCreateWithoutUserInfoInput = {
    userId?: number
    userPw: string
    gameResults1?: game_result_logUncheckedCreateNestedManyWithoutUser_player1Input
    gameResults2?: game_result_logUncheckedCreateNestedManyWithoutUser_player2Input
  }

  export type userCreateOrConnectWithoutUserInfoInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUserInfoInput, userUncheckedCreateWithoutUserInfoInput>
  }

  export type userUpsertWithoutUserInfoInput = {
    update: XOR<userUpdateWithoutUserInfoInput, userUncheckedUpdateWithoutUserInfoInput>
    create: XOR<userCreateWithoutUserInfoInput, userUncheckedCreateWithoutUserInfoInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutUserInfoInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutUserInfoInput, userUncheckedUpdateWithoutUserInfoInput>
  }

  export type userUpdateWithoutUserInfoInput = {
    userPw?: StringFieldUpdateOperationsInput | string
    gameResults1?: game_result_logUpdateManyWithoutUser_player1NestedInput
    gameResults2?: game_result_logUpdateManyWithoutUser_player2NestedInput
  }

  export type userUncheckedUpdateWithoutUserInfoInput = {
    userId?: IntFieldUpdateOperationsInput | number
    userPw?: StringFieldUpdateOperationsInput | string
    gameResults1?: game_result_logUncheckedUpdateManyWithoutUser_player1NestedInput
    gameResults2?: game_result_logUncheckedUpdateManyWithoutUser_player2NestedInput
  }

  export type userCreateWithoutGameResults1Input = {
    userPw: string
    userInfo?: userInfoCreateNestedOneWithoutUserInput
    gameResults2?: game_result_logCreateNestedManyWithoutUser_player2Input
  }

  export type userUncheckedCreateWithoutGameResults1Input = {
    userId?: number
    userPw: string
    userInfo?: userInfoUncheckedCreateNestedOneWithoutUserInput
    gameResults2?: game_result_logUncheckedCreateNestedManyWithoutUser_player2Input
  }

  export type userCreateOrConnectWithoutGameResults1Input = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutGameResults1Input, userUncheckedCreateWithoutGameResults1Input>
  }

  export type userCreateWithoutGameResults2Input = {
    userPw: string
    userInfo?: userInfoCreateNestedOneWithoutUserInput
    gameResults1?: game_result_logCreateNestedManyWithoutUser_player1Input
  }

  export type userUncheckedCreateWithoutGameResults2Input = {
    userId?: number
    userPw: string
    userInfo?: userInfoUncheckedCreateNestedOneWithoutUserInput
    gameResults1?: game_result_logUncheckedCreateNestedManyWithoutUser_player1Input
  }

  export type userCreateOrConnectWithoutGameResults2Input = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutGameResults2Input, userUncheckedCreateWithoutGameResults2Input>
  }

  export type userUpsertWithoutGameResults1Input = {
    update: XOR<userUpdateWithoutGameResults1Input, userUncheckedUpdateWithoutGameResults1Input>
    create: XOR<userCreateWithoutGameResults1Input, userUncheckedCreateWithoutGameResults1Input>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutGameResults1Input = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutGameResults1Input, userUncheckedUpdateWithoutGameResults1Input>
  }

  export type userUpdateWithoutGameResults1Input = {
    userPw?: StringFieldUpdateOperationsInput | string
    userInfo?: userInfoUpdateOneWithoutUserNestedInput
    gameResults2?: game_result_logUpdateManyWithoutUser_player2NestedInput
  }

  export type userUncheckedUpdateWithoutGameResults1Input = {
    userId?: IntFieldUpdateOperationsInput | number
    userPw?: StringFieldUpdateOperationsInput | string
    userInfo?: userInfoUncheckedUpdateOneWithoutUserNestedInput
    gameResults2?: game_result_logUncheckedUpdateManyWithoutUser_player2NestedInput
  }

  export type userUpsertWithoutGameResults2Input = {
    update: XOR<userUpdateWithoutGameResults2Input, userUncheckedUpdateWithoutGameResults2Input>
    create: XOR<userCreateWithoutGameResults2Input, userUncheckedCreateWithoutGameResults2Input>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutGameResults2Input = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutGameResults2Input, userUncheckedUpdateWithoutGameResults2Input>
  }

  export type userUpdateWithoutGameResults2Input = {
    userPw?: StringFieldUpdateOperationsInput | string
    userInfo?: userInfoUpdateOneWithoutUserNestedInput
    gameResults1?: game_result_logUpdateManyWithoutUser_player1NestedInput
  }

  export type userUncheckedUpdateWithoutGameResults2Input = {
    userId?: IntFieldUpdateOperationsInput | number
    userPw?: StringFieldUpdateOperationsInput | string
    userInfo?: userInfoUncheckedUpdateOneWithoutUserNestedInput
    gameResults1?: game_result_logUncheckedUpdateManyWithoutUser_player1NestedInput
  }

  export type game_result_logCreateManyUser_player1Input = {
    gameId?: number
    player1Score: number
    startTime?: Date | string | null
    player2?: number | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
  }

  export type game_result_logCreateManyUser_player2Input = {
    gameId?: number
    player1: number
    player1Score: number
    startTime?: Date | string | null
    win?: number | null
    endTime?: Date | string | null
    player2Score?: number | null
  }

  export type game_result_logUpdateWithoutUser_player1Input = {
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
    user_player2?: userUpdateOneWithoutGameResults2NestedInput
  }

  export type game_result_logUncheckedUpdateWithoutUser_player1Input = {
    gameId?: IntFieldUpdateOperationsInput | number
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2?: NullableIntFieldUpdateOperationsInput | number | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type game_result_logUncheckedUpdateManyWithoutUser_player1Input = {
    gameId?: IntFieldUpdateOperationsInput | number
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2?: NullableIntFieldUpdateOperationsInput | number | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type game_result_logUpdateWithoutUser_player2Input = {
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
    user_player1?: userUpdateOneRequiredWithoutGameResults1NestedInput
  }

  export type game_result_logUncheckedUpdateWithoutUser_player2Input = {
    gameId?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type game_result_logUncheckedUpdateManyWithoutUser_player2Input = {
    gameId?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player1Score?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    win?: NullableIntFieldUpdateOperationsInput | number | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Score?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userInfoDefaultArgs instead
     */
    export type userInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use game_result_logDefaultArgs instead
     */
    export type game_result_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = game_result_logDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}